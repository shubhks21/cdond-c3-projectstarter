version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            # SUCCESS = 1
            SUCCESS=$(curl --insecure  https://kvdb.io/Bke8cmeq4fa6CtcMJAZyWK/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Test front-end build
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Test back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run test          

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Analyze front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Analyze back-end
          command: |
            # Your code here
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: yum update -y && yum install -y tar gzip && yum clean all
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeoplebe \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeoplefe \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              # Your code here
              # apt-get update && apt-get install -y awscli (aws image already in use then why added this :) )
              # export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
              # echo "backend ansible_host=$BACKEND_IP ansible_user=ec2-user" >> .circleci/ansible/inventory.txt
              aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeoplebe" --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: circleci/python:3.8
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["2c:f2:09:60:91:bb:6b:63:f1:83:e7:20:32:4f:ac:4f"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y tar gzip
            pip install ansible awscli
      - run:
          name: Configure server
          command: |
            # Your code here
            # echo ENVIRONMENT=production >> backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            cat backend/.env
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
            echo "content of migrations file"
      - run:
          name: Send migration status to kvdb.io
          command: |
            # Your code here
            pwd
            ls
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              kvdb_url="https://kvdb.io/Bke8cmeq4fa6CtcMJAZyWK/migration_${CIRCLE_WORKFLOW_ID:0:7}"
              curl --insecure ${kvdb_url} -d '1'
              echo "it worked"
            fi
      # Here's where you will add some code to rollback on failure      
      - destroy-environment

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      # - image: amazon/aws-cli
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            curl "https://d1vvhvl2y92vvt.cloudfront.net/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            #source ~/.nvm/nvm.sh
            #nvm install node
            # yum install -y nodejs npm tar gzip
            # yum update -y && yum install -y tar gzip && yum clean all
            # apk add --no-cache nodejs npm
            # apt-get update
            # apt-get install -y nodejs npm tar gzip
            # ln -s /usr/bin/nodejs /usr/bin/node
      #- attach_workspace:
      #    at: ~/
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            # your code here
            # export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --filters "Name=tag:project,Values=udapeoplebe" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy-environment
      - revert-migrations
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: circleci/python:3.8
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["2c:f2:09:60:91:bb:6b:63:f1:83:e7:20:32:4f:ac:4f"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt-get update
            sudo apt-get install -y tar gzip
            curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
            sudo apt-get install -y nodejs
            pip install ansible awscli
      #- run:
      #    name: Install npm
      #    command: |
      #      sudo npm install -g npm
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ../
            echo ENVIRONMENT=production >> backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            cat backend/.env

            ## Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz .circleci/ansible/roles/deploy/tasks
            echo "folder content"
            ls
            pwd
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=false
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: cimg/aws:2023.09.1
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt install curl
            #apk add curl nodejs npm
            #apk add --update python3 py3-pip
            #pip3 install awscli
      #- run:
      #    name: Get backend url
      #    command: |
      #      # your code here
      #      export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeoplebe" --output text)
      #      export API_URL="http://${BACKEND_IP}:3030"
      #      echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeoplebe" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      #- run:
      #    name: Install dependencies
      #    command: |
      #      # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople \
              --parameter-overrides NewWorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id and delete unused resources
          command: |
            # your code here
            #export OldWorkflowID="the id here"
            #export STACKS=[] #put the list of stacks here
            ## Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            ## Fetch the stack names 
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
              echo "deletion started"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-be-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-fe-${OldWorkflowID}"
              echo "deletion ended"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]